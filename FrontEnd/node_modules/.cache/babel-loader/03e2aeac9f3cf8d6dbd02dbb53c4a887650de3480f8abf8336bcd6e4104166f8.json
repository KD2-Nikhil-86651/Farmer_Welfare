{"ast":null,"code":"// import axios from \"axios\";\n\n// const API_URL = \"https://localhost:7299/api/Crops\"; // Adjust this based on your backend\n\n// // ✅ Get all crops\n// export async function getCrops() {\n//   try {\n//     const response = await axios.get(`${API_URL}`);\n//     return response.data.data; // Returns crop list\n//   } catch (error) {\n//     console.error(\"Error fetching crops:\", error.response?.data || error);\n//     throw error.response?.data || error;\n//   }\n// }\n\n// // ✅ Update crop rate (Admin only)\n// export async function updateCropRate(cropId, newRate, adminUser) {\n//   try {\n//     const response = await axios.post(`${API_URL}/update-rate`, {\n//       CropId: cropId,\n//       NewRate: newRate,\n//       AdminUser: adminUser,\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error updating crop rate:\", error.response?.data || error);\n//     throw error.response?.data || error;\n//   }\n// }\n\n// // ✅ Get crop rate history\n// export async function getCropRateHistory(cropId) {\n//   try {\n//     const response = await axios.get(`${API_URL}/rate-history/${cropId}`);\n//     return response.data.data; // Returns history list\n//   } catch (error) {\n//     console.error(\"Error fetching rate history:\", error.response?.data || error);\n//     throw error.response?.data || error;\n//   }\n// }\n\nimport axios from \"axios\";\nconst API_URL = \"https://localhost:7299/api/Crops\"; // Adjust this based on your backend\n\n// ✅ Get admin token from sessionStorage\nconst getAuthHeaders = () => {\n  const token = sessionStorage.getItem(\"token\");\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {}; // ✅ Send token in the headers\n};\n\n// ✅ Get all crops\nexport async function getCrops() {\n  try {\n    const response = await axios.get(`${API_URL}`, {\n      headers: getAuthHeaders()\n    });\n    return response.data.data; // Returns crop list\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error(\"Error fetching crops:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error;\n  }\n}\n\n// ✅ Update crop rate (Admin only)\nexport async function updateCropRate(cropId, newRate) {\n  try {\n    const response = await axios.post(`${API_URL}/update-rate`, {\n      cropId,\n      newRate\n    },\n    // Send cropId and newRate in body\n    {\n      headers: getAuthHeaders()\n    } // ✅ Send token in headers\n    );\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response4;\n    console.error(\"Error updating crop rate:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error;\n  }\n}\n\n// ✅ Get crop rate history\nexport async function getCropRateHistory(cropId) {\n  try {\n    const response = await axios.get(`${API_URL}/rate-history/${cropId}`, {\n      headers: getAuthHeaders()\n    });\n    return response.data.data; // Returns history list\n  } catch (error) {\n    var _error$response5, _error$response6;\n    console.error(\"Error fetching rate history:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error);\n    throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error;\n  }\n}","map":{"version":3,"names":["axios","API_URL","getAuthHeaders","token","sessionStorage","getItem","Authorization","getCrops","response","get","headers","data","error","_error$response","_error$response2","console","updateCropRate","cropId","newRate","post","_error$response3","_error$response4","getCropRateHistory","_error$response5","_error$response6"],"sources":["D:/Nikhil/Downloads/CDAC Project/FarmerFrontend/src/service/CropService.js"],"sourcesContent":["// import axios from \"axios\";\r\n\r\n// const API_URL = \"https://localhost:7299/api/Crops\"; // Adjust this based on your backend\r\n\r\n// // ✅ Get all crops\r\n// export async function getCrops() {\r\n//   try {\r\n//     const response = await axios.get(`${API_URL}`);\r\n//     return response.data.data; // Returns crop list\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching crops:\", error.response?.data || error);\r\n//     throw error.response?.data || error;\r\n//   }\r\n// }\r\n\r\n// // ✅ Update crop rate (Admin only)\r\n// export async function updateCropRate(cropId, newRate, adminUser) {\r\n//   try {\r\n//     const response = await axios.post(`${API_URL}/update-rate`, {\r\n//       CropId: cropId,\r\n//       NewRate: newRate,\r\n//       AdminUser: adminUser,\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error updating crop rate:\", error.response?.data || error);\r\n//     throw error.response?.data || error;\r\n//   }\r\n// }\r\n\r\n// // ✅ Get crop rate history\r\n// export async function getCropRateHistory(cropId) {\r\n//   try {\r\n//     const response = await axios.get(`${API_URL}/rate-history/${cropId}`);\r\n//     return response.data.data; // Returns history list\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching rate history:\", error.response?.data || error);\r\n//     throw error.response?.data || error;\r\n//   }\r\n// }\r\n\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"https://localhost:7299/api/Crops\"; // Adjust this based on your backend\r\n\r\n// ✅ Get admin token from sessionStorage\r\nconst getAuthHeaders = () => {\r\n  const token = sessionStorage.getItem(\"token\");\r\n  return token ? { Authorization: `Bearer ${token}` } : {}; // ✅ Send token in the headers\r\n};\r\n\r\n// ✅ Get all crops\r\nexport async function getCrops() {\r\n  try {\r\n    const response = await axios.get(`${API_URL}`, { headers: getAuthHeaders() });\r\n    return response.data.data; // Returns crop list\r\n  } catch (error) {\r\n    console.error(\"Error fetching crops:\", error.response?.data || error);\r\n    throw error.response?.data || error;\r\n  }\r\n}\r\n\r\n// ✅ Update crop rate (Admin only)\r\nexport async function updateCropRate(cropId, newRate) {\r\n  try {\r\n    const response = await axios.post(\r\n      `${API_URL}/update-rate`,\r\n      { cropId, newRate }, // Send cropId and newRate in body\r\n      { headers: getAuthHeaders() } // ✅ Send token in headers\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error updating crop rate:\", error.response?.data || error);\r\n    throw error.response?.data || error;\r\n  }\r\n}\r\n\r\n// ✅ Get crop rate history\r\nexport async function getCropRateHistory(cropId) {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/rate-history/${cropId}`, { headers: getAuthHeaders() });\r\n    return response.data.data; // Returns history list\r\n  } catch (error) {\r\n    console.error(\"Error fetching rate history:\", error.response?.data || error);\r\n    throw error.response?.data || error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}