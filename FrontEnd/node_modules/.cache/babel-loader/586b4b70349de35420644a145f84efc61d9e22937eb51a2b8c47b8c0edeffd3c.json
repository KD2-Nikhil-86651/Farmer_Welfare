{"ast":null,"code":"var _jsxFileName = \"D:\\\\Nikhil\\\\Downloads\\\\CDAC Project\\\\FarmerFrontend\\\\src\\\\screens\\\\AdminUpdateCrop.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getCrops, updateCropRate, getCropRateHistory } from \"../services/CropService\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminUpdateCrop() {\n  _s();\n  const [crops, setCrops] = useState([]);\n  const [selectedCrop, setSelectedCrop] = useState(\"\");\n  const [newRate, setNewRate] = useState(\"\");\n  const [adminUser] = useState(\"Admin123\");\n  const [history, setHistory] = useState([]);\n  useEffect(() => {\n    fetchCrops();\n  }, []);\n  async function fetchCrops() {\n    try {\n      const data = await getCrops();\n      setCrops(data);\n    } catch (error) {\n      toast.error(\"Failed to fetch crops.\");\n    }\n  }\n  async function fetchHistory(cropId) {\n    if (!cropId) return;\n    try {\n      const data = await getCropRateHistory(cropId);\n      setHistory(data);\n    } catch (error) {\n      toast.error(\"No rate history found.\");\n      setHistory([]);\n    }\n  }\n  async function handleUpdate() {\n    if (!selectedCrop || newRate <= 0) {\n      toast.error(\"Please select a crop and enter a valid rate.\");\n      return;\n    }\n    try {\n      await updateCropRate(selectedCrop, parseInt(newRate), adminUser);\n      toast.success(\"Crop rate updated successfully!\");\n      fetchHistory(selectedCrop);\n    } catch (error) {\n      toast.error(error.message || \"Failed to update crop rate.\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Admin - Update Crop Rate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Crop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-control\",\n        value: selectedCrop,\n        onChange: e => {\n          setSelectedCrop(e.target.value);\n          fetchHistory(e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select Crop --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), crops.map(crop => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: crop.CropId,\n          children: [crop.CropName, \" - \\u20B9\", crop.Rate]\n        }, crop.CropId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"New Rate (\\u20B9)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: \"form-control\",\n        value: newRate,\n        onChange: e => setNewRate(e.target.value),\n        placeholder: \"Enter new rate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleUpdate,\n      children: \"Update Rate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Rate Update History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-bordered\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Old Rate (\\u20B9)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Updated By\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: history.map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(entry.RateDate).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\"\\u20B9\", entry.Rate]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entry.UpdatedBy\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminUpdateCrop, \"UFb4PZnVfWzceQP3Z6qR37wL0I0=\");\n_c = AdminUpdateCrop;\nexport default AdminUpdateCrop;\nvar _c;\n$RefreshReg$(_c, \"AdminUpdateCrop\");","map":{"version":3,"names":["React","useState","useEffect","getCrops","updateCropRate","getCropRateHistory","toast","jsxDEV","_jsxDEV","AdminUpdateCrop","_s","crops","setCrops","selectedCrop","setSelectedCrop","newRate","setNewRate","adminUser","history","setHistory","fetchCrops","data","error","fetchHistory","cropId","handleUpdate","parseInt","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","crop","CropId","CropName","Rate","type","placeholder","onClick","length","entry","index","Date","RateDate","toLocaleDateString","UpdatedBy","_c","$RefreshReg$"],"sources":["D:/Nikhil/Downloads/CDAC Project/FarmerFrontend/src/screens/AdminUpdateCrop.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { getCrops, updateCropRate, getCropRateHistory } from \"../services/CropService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nfunction AdminUpdateCrop() {\r\n  const [crops, setCrops] = useState([]);\r\n  const [selectedCrop, setSelectedCrop] = useState(\"\");\r\n  const [newRate, setNewRate] = useState(\"\");\r\n  const [adminUser] = useState(\"Admin123\");\r\n  const [history, setHistory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchCrops();\r\n  }, []);\r\n\r\n  async function fetchCrops() {\r\n    try {\r\n      const data = await getCrops();\r\n      setCrops(data);\r\n    } catch (error) {\r\n      toast.error(\"Failed to fetch crops.\");\r\n    }\r\n  }\r\n\r\n  async function fetchHistory(cropId) {\r\n    if (!cropId) return;\r\n    try {\r\n      const data = await getCropRateHistory(cropId);\r\n      setHistory(data);\r\n    } catch (error) {\r\n      toast.error(\"No rate history found.\");\r\n      setHistory([]);\r\n    }\r\n  }\r\n\r\n  async function handleUpdate() {\r\n    if (!selectedCrop || newRate <= 0) {\r\n      toast.error(\"Please select a crop and enter a valid rate.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await updateCropRate(selectedCrop, parseInt(newRate), adminUser);\r\n      toast.success(\"Crop rate updated successfully!\");\r\n      fetchHistory(selectedCrop);\r\n    } catch (error) {\r\n      toast.error(error.message || \"Failed to update crop rate.\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h2 className=\"text-center\">Admin - Update Crop Rate</h2>\r\n\r\n      <div className=\"mb-3\">\r\n        <label>Select Crop</label>\r\n        <select\r\n          className=\"form-control\"\r\n          value={selectedCrop}\r\n          onChange={(e) => {\r\n            setSelectedCrop(e.target.value);\r\n            fetchHistory(e.target.value);\r\n          }}\r\n        >\r\n          <option value=\"\">-- Select Crop --</option>\r\n          {crops.map((crop) => (\r\n            <option key={crop.CropId} value={crop.CropId}>\r\n              {crop.CropName} - ₹{crop.Rate}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"mb-3\">\r\n        <label>New Rate (₹)</label>\r\n        <input\r\n          type=\"number\"\r\n          className=\"form-control\"\r\n          value={newRate}\r\n          onChange={(e) => setNewRate(e.target.value)}\r\n          placeholder=\"Enter new rate\"\r\n        />\r\n      </div>\r\n\r\n      <button className=\"btn btn-primary\" onClick={handleUpdate}>\r\n        Update Rate\r\n      </button>\r\n\r\n      {history.length > 0 && (\r\n        <div className=\"mt-4\">\r\n          <h4>Rate Update History</h4>\r\n          <table className=\"table table-bordered\">\r\n            <thead>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Old Rate (₹)</th>\r\n                <th>Updated By</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {history.map((entry, index) => (\r\n                <tr key={index}>\r\n                  <td>{new Date(entry.RateDate).toLocaleDateString()}</td>\r\n                  <td>₹{entry.Rate}</td>\r\n                  <td>{entry.UpdatedBy}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminUpdateCrop;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}