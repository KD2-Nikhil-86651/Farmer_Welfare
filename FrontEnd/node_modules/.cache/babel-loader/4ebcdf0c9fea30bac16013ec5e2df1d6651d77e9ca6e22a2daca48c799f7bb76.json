{"ast":null,"code":"var _jsxFileName = \"D:\\\\Nikhil\\\\Downloads\\\\CDAC Project\\\\FarmerFrontend\\\\src\\\\screens\\\\AdminUpdateCrop.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from \"react\";\n// // import { getCrops, updateCropRate, getCropRateHistory } from \"../service/CropService\";\n// // import { toast } from \"react-toastify\";\n\n// // function AdminUpdateCrop() {\n// //   const [crops, setCrops] = useState([]);\n// //   const [selectedCrop, setSelectedCrop] = useState(\"\");\n// //   const [newRate, setNewRate] = useState(\"\");\n// //   const [adminUser] = useState(\"Admin123\");\n// //   const [history, setHistory] = useState([]);\n\n// //   useEffect(() => {\n// //     fetchCrops();\n// //   }, []);\n\n// //   // ✅ Fetch Crops\n// //   async function fetchCrops() {\n// //     try {\n// //       console.log(\"Fetching crops...\"); // ✅ Debugging log\n// //       const data = await getCrops();\n// //       console.log(\"Crops fetched successfully:\", data); // ✅ Log the response\n// //       setCrops(data);\n// //     } catch (error) {\n// //       console.error(\"Error fetching crops:\", error);\n// //       toast.error(\"Failed to fetch crops.\");\n// //     }\n// //   }\n\n// //   // ✅ Fetch Crop Rate History\n// //   async function fetchHistory(cropId) {\n// //     const parsedCropId = parseInt(cropId); // ✅ Convert to number\n\n// //     if (!parsedCropId || isNaN(parsedCropId)) {\n// //       console.warn(\"Invalid cropId received:\", cropId);\n// //       return;\n// //     }\n\n// //     try {\n// //       console.log(`Fetching history for Crop ID: ${parsedCropId}`); // ✅ Debugging\n// //       const data = await getCropRateHistory(parsedCropId);\n// //       console.log(\"History fetched successfully:\", data); // ✅ Log API response\n// //       setHistory(data);\n// //     } catch (error) {\n// //       console.error(\"Error fetching rate history:\", error);\n// //       toast.error(\"No rate history found.\");\n// //       setHistory([]);\n// //     }\n// //   }\n\n// //   // ✅ Handle Update Button Click\n// //   async function handleUpdate() {\n// //     const parsedCropId = parseInt(selectedCrop); // ✅ Convert to number\n\n// //     if (!parsedCropId || isNaN(parsedCropId) || newRate <= 0) {\n// //       toast.error(\"Please select a valid crop and enter a valid rate.\");\n// //       return;\n// //     }\n\n// //     try {\n// //       console.log(`Updating Crop ID: ${parsedCropId} with Rate: ₹${newRate}`); // ✅ Debugging\n// //       await updateCropRate(parsedCropId, parseInt(newRate), adminUser);\n// //       toast.success(\"Crop rate updated successfully!\");\n// //       fetchHistory(parsedCropId); // ✅ Refresh History\n// //     } catch (error) {\n// //       console.error(\"Error updating crop rate:\", error);\n// //       toast.error(error.message || \"Failed to update crop rate.\");\n// //     }\n// //   }\n\n// //   return (\n// //     <div className=\"container mt-4\">\n// //       <h2 className=\"text-center\">Admin - Update Crop Rate</h2>\n\n// //       {/* Select Crop */}\n// //       <div className=\"mb-3\">\n// //         <label>Select Crop</label>\n// //         <select\n// //           className=\"form-control\"\n// //           value={selectedCrop}\n// //           onChange={(e) => {\n// //             const cropId = parseInt(e.target.value); // ✅ Convert to number\n// //             setSelectedCrop(cropId);\n// //             if (cropId > 0) fetchHistory(cropId); // ✅ Prevent invalid API calls\n// //           }}\n// //         >\n// //           <option value=\"\">-- Select Crop --</option>\n// //           {crops.map((crop) => (\n// //             <option key={crop.CropId} value={crop.CropId}>\n// //               {crop.CropName} - ₹{crop.Rate}\n// //             </option>\n// //           ))}\n// //         </select>\n// //       </div>\n\n// //       {/* Enter New Rate */}\n// //       <div className=\"mb-3\">\n// //         <label>New Rate (₹)</label>\n// //         <input\n// //           type=\"number\"\n// //           className=\"form-control\"\n// //           value={newRate}\n// //           onChange={(e) => setNewRate(e.target.value)}\n// //           placeholder=\"Enter new rate\"\n// //         />\n// //       </div>\n\n// //       {/* Update Button */}\n// //       <button className=\"btn btn-primary\" onClick={handleUpdate}>\n// //         Update Rate\n// //       </button>\n\n// //       {/* Display Crop Rate History */}\n// //       {history.length > 0 && (\n// //         <div className=\"mt-4\">\n// //           <h4>Rate Update History</h4>\n// //           <table className=\"table table-bordered\">\n// //             <thead>\n// //               <tr>\n// //                 <th>Date</th>\n// //                 <th>Old Rate (₹)</th>\n// //                 <th>Updated By</th>\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {history.map((entry, index) => (\n// //                 <tr key={index}>\n// //                   <td>{new Date(entry.RateDate).toLocaleDateString()}</td>\n// //                   <td>₹{entry.Rate}</td>\n// //                   <td>{entry.UpdatedBy}</td>\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default AdminUpdateCrop;\n\n// import React, { useState, useEffect } from \"react\";\n// import { getCrops, updateCropRate, getCropRateHistory } from \"../service/CropService\";\n// import { toast } from \"react-toastify\";\n\n// function AdminUpdateCrop() {\n//   const [crops, setCrops] = useState([]); // Store fetched crops\n//   const [selectedCrop, setSelectedCrop] = useState(\"\"); // Store selected crop ID\n//   const [newRate, setNewRate] = useState(\"\"); // Store new rate input\n//   const [adminUser] = useState(\"Admin123\"); // Admin user (Static)\n//   const [history, setHistory] = useState([]); // Store crop rate history\n//   const [loading, setLoading] = useState(false); // Loading state\n\n//   // ✅ Fetch Crops on Component Mount\n//   useEffect(() => {\n//     fetchCrops();\n//   }, []);\n\n//   // ✅ Fetch All Crops\n//   async function fetchCrops() {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching crops from API...\");\n//       const data = await getCrops();\n//       console.log(\"Crops fetched:\", data);\n\n//       if (!Array.isArray(data)) {\n//         throw new Error(\"Invalid API response. Expected an array.\");\n//       }\n\n//       setCrops(data);\n//     } catch (error) {\n//       console.error(\"Error fetching crops:\", error);\n//       toast.error(\"Failed to fetch crops.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   }\n\n//   // ✅ Fetch Crop Rate History\n//   async function fetchHistory(cropId) {\n//     const parsedCropId = parseInt(cropId, 10);\n\n//     if (!parsedCropId || isNaN(parsedCropId)) {\n//       console.warn(\"Invalid cropId received:\", cropId);\n//       return;\n//     }\n\n//     try {\n//       console.log(`Fetching history for Crop ID: ${parsedCropId}`);\n//       const data = await getCropRateHistory(parsedCropId);\n//       console.log(\"History fetched:\", data);\n//       setHistory(data);\n//     } catch (error) {\n//       console.error(\"Error fetching rate history:\", error);\n//       toast.error(\"No rate history found.\");\n//       setHistory([]);\n//     }\n//   }\n\n//   // ✅ Handle Update Button Click\n//   async function handleUpdate() {\n//     const parsedCropId = parseInt(selectedCrop, 10);\n//     const parsedNewRate = parseInt(newRate, 10);\n\n//     if (!parsedCropId || isNaN(parsedCropId) || parsedNewRate <= 0) {\n//       toast.error(\"Please select a valid crop and enter a valid rate.\");\n//       return;\n//     }\n\n//     try {\n//       console.log(`Updating Crop ID: ${parsedCropId} with Rate: ₹${parsedNewRate}`);\n//       await updateCropRate(parsedCropId, parsedNewRate, adminUser);\n//       toast.success(\"Crop rate updated successfully!\");\n//       fetchHistory(parsedCropId); // Refresh History\n//     } catch (error) {\n//       console.error(\"Error updating crop rate:\", error);\n//       toast.error(error.message || \"Failed to update crop rate.\");\n//     }\n//   }\n\n//   return (\n//     <div className=\"container mt-4\">\n//       <h2 className=\"text-center\">Admin - Update Crop Rate</h2>\n\n//       {/* Select Crop */}\n//       <div className=\"mb-3\">\n//         <label>Select Crop</label>\n//         <select\n//           className=\"form-control\"\n//           value={selectedCrop}\n//           onChange={(e) => {\n//             const cropId = parseInt(e.target.value, 10);\n//             setSelectedCrop(cropId);\n//             if (cropId > 0) fetchHistory(cropId);\n//           }}\n//         >\n//           <option value=\"\">-- Select Crop --</option>\n//           {loading ? (\n//             <option disabled>Loading crops...</option>\n//           ) : (\n//             crops.map((crop) => (\n//               <option key={crop.cropId} value={crop.cropId}>\n//                 {crop.cropName}\n//               </option>\n//             ))\n//           )}\n//         </select>\n//       </div>\n\n//       {/* Enter New Rate */}\n//       <div className=\"mb-3\">\n//         <label>New Rate (₹)</label>\n//         <input\n//           type=\"number\"\n//           className=\"form-control\"\n//           value={newRate}\n//           onChange={(e) => setNewRate(e.target.value)}\n//           placeholder=\"Enter new rate\"\n//         />\n//       </div>\n\n//       {/* Update Button */}\n//       <button className=\"btn btn-primary\" onClick={handleUpdate}>\n//         Update Rate\n//       </button>\n\n//       {/* Display Crop Rate History */}\n//       {history.length > 0 && (\n//         <div className=\"mt-4\">\n//           <h4>Rate Update History</h4>\n//           <table className=\"table table-bordered\">\n//             <thead>\n//               <tr>\n//                 <th>Date</th>\n//                 <th>Old Rate (₹)</th>\n//                 <th>Updated By</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {history.map((entry, index) => (\n//                 <tr key={index}>\n//                   <td>{new Date(entry.rateDate).toLocaleDateString()}</td>\n//                   <td>₹{entry.rate}</td>\n//                   <td>{entry.updatedBy}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default AdminUpdateCrop;\n\nimport React, { useState, useEffect } from \"react\";\nimport { getCrops, updateCropRate, getCropRateHistory } from \"../service/CropService\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminUpdateCrop() {\n  _s();\n  const [crops, setCrops] = useState([]); // Store fetched crops\n  const [selectedCrop, setSelectedCrop] = useState(\"\"); // Store selected crop ID\n  const [newRate, setNewRate] = useState(\"\"); // Store new rate input\n  const [history, setHistory] = useState([]); // Store crop rate history\n  const [loading, setLoading] = useState(false); // Loading state\n\n  // ✅ Retrieve Admin Token from SessionStorage\n  const adminToken = sessionStorage.getItem(\"token\");\n\n  // ✅ Fetch Crops on Component Mount\n  useEffect(() => {\n    fetchCrops();\n  }, []);\n\n  // ✅ Fetch All Crops\n  async function fetchCrops() {\n    try {\n      setLoading(true);\n      const data = await getCrops();\n      setCrops(data);\n    } catch (error) {\n      toast.error(\"Failed to fetch crops.\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // ✅ Fetch Crop Rate History\n  async function fetchHistory(cropId) {\n    if (!cropId) return;\n    try {\n      const data = await getCropRateHistory(cropId);\n      setHistory(data);\n    } catch (error) {\n      toast.error(\"No rate history found.\");\n      setHistory([]);\n    }\n  }\n\n  // ✅ Handle Update Button Click\n  async function handleUpdate() {\n    if (!selectedCrop || newRate <= 0) {\n      toast.error(\"Please select a valid crop and enter a valid rate.\");\n      return;\n    }\n    try {\n      await updateCropRate(selectedCrop, parseInt(newRate), adminToken);\n      toast.success(\"Crop rate updated successfully!\");\n      fetchHistory(selectedCrop);\n    } catch (error) {\n      toast.error(error.message || \"Failed to update crop rate.\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Admin - Update Crop Rate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Crop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-control\",\n        value: selectedCrop,\n        onChange: e => {\n          setSelectedCrop(e.target.value);\n          fetchHistory(e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select Crop --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this), crops.map(crop => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: crop.cropId,\n          children: crop.cropName\n        }, crop.cropId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"New Rate (\\u20B9)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: \"form-control\",\n        value: newRate,\n        onChange: e => setNewRate(e.target.value),\n        placeholder: \"Enter new rate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleUpdate,\n      children: \"Update Rate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminUpdateCrop, \"XYQ5CsuKBR1AAoPT4+kh8OsWuDA=\");\n_c = AdminUpdateCrop;\nexport default AdminUpdateCrop;\nvar _c;\n$RefreshReg$(_c, \"AdminUpdateCrop\");","map":{"version":3,"names":["React","useState","useEffect","getCrops","updateCropRate","getCropRateHistory","toast","jsxDEV","_jsxDEV","AdminUpdateCrop","_s","crops","setCrops","selectedCrop","setSelectedCrop","newRate","setNewRate","history","setHistory","loading","setLoading","adminToken","sessionStorage","getItem","fetchCrops","data","error","fetchHistory","cropId","handleUpdate","parseInt","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","crop","cropName","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/Nikhil/Downloads/CDAC Project/FarmerFrontend/src/screens/AdminUpdateCrop.jsx"],"sourcesContent":["// // import React, { useState, useEffect } from \"react\";\r\n// // import { getCrops, updateCropRate, getCropRateHistory } from \"../service/CropService\";\r\n// // import { toast } from \"react-toastify\";\r\n\r\n// // function AdminUpdateCrop() {\r\n// //   const [crops, setCrops] = useState([]);\r\n// //   const [selectedCrop, setSelectedCrop] = useState(\"\");\r\n// //   const [newRate, setNewRate] = useState(\"\");\r\n// //   const [adminUser] = useState(\"Admin123\");\r\n// //   const [history, setHistory] = useState([]);\r\n\r\n// //   useEffect(() => {\r\n// //     fetchCrops();\r\n// //   }, []);\r\n\r\n// //   // ✅ Fetch Crops\r\n// //   async function fetchCrops() {\r\n// //     try {\r\n// //       console.log(\"Fetching crops...\"); // ✅ Debugging log\r\n// //       const data = await getCrops();\r\n// //       console.log(\"Crops fetched successfully:\", data); // ✅ Log the response\r\n// //       setCrops(data);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error fetching crops:\", error);\r\n// //       toast.error(\"Failed to fetch crops.\");\r\n// //     }\r\n// //   }\r\n\r\n// //   // ✅ Fetch Crop Rate History\r\n// //   async function fetchHistory(cropId) {\r\n// //     const parsedCropId = parseInt(cropId); // ✅ Convert to number\r\n\r\n// //     if (!parsedCropId || isNaN(parsedCropId)) {\r\n// //       console.warn(\"Invalid cropId received:\", cropId);\r\n// //       return;\r\n// //     }\r\n\r\n// //     try {\r\n// //       console.log(`Fetching history for Crop ID: ${parsedCropId}`); // ✅ Debugging\r\n// //       const data = await getCropRateHistory(parsedCropId);\r\n// //       console.log(\"History fetched successfully:\", data); // ✅ Log API response\r\n// //       setHistory(data);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error fetching rate history:\", error);\r\n// //       toast.error(\"No rate history found.\");\r\n// //       setHistory([]);\r\n// //     }\r\n// //   }\r\n\r\n// //   // ✅ Handle Update Button Click\r\n// //   async function handleUpdate() {\r\n// //     const parsedCropId = parseInt(selectedCrop); // ✅ Convert to number\r\n\r\n// //     if (!parsedCropId || isNaN(parsedCropId) || newRate <= 0) {\r\n// //       toast.error(\"Please select a valid crop and enter a valid rate.\");\r\n// //       return;\r\n// //     }\r\n\r\n// //     try {\r\n// //       console.log(`Updating Crop ID: ${parsedCropId} with Rate: ₹${newRate}`); // ✅ Debugging\r\n// //       await updateCropRate(parsedCropId, parseInt(newRate), adminUser);\r\n// //       toast.success(\"Crop rate updated successfully!\");\r\n// //       fetchHistory(parsedCropId); // ✅ Refresh History\r\n// //     } catch (error) {\r\n// //       console.error(\"Error updating crop rate:\", error);\r\n// //       toast.error(error.message || \"Failed to update crop rate.\");\r\n// //     }\r\n// //   }\r\n\r\n// //   return (\r\n// //     <div className=\"container mt-4\">\r\n// //       <h2 className=\"text-center\">Admin - Update Crop Rate</h2>\r\n\r\n// //       {/* Select Crop */}\r\n// //       <div className=\"mb-3\">\r\n// //         <label>Select Crop</label>\r\n// //         <select\r\n// //           className=\"form-control\"\r\n// //           value={selectedCrop}\r\n// //           onChange={(e) => {\r\n// //             const cropId = parseInt(e.target.value); // ✅ Convert to number\r\n// //             setSelectedCrop(cropId);\r\n// //             if (cropId > 0) fetchHistory(cropId); // ✅ Prevent invalid API calls\r\n// //           }}\r\n// //         >\r\n// //           <option value=\"\">-- Select Crop --</option>\r\n// //           {crops.map((crop) => (\r\n// //             <option key={crop.CropId} value={crop.CropId}>\r\n// //               {crop.CropName} - ₹{crop.Rate}\r\n// //             </option>\r\n// //           ))}\r\n// //         </select>\r\n// //       </div>\r\n\r\n// //       {/* Enter New Rate */}\r\n// //       <div className=\"mb-3\">\r\n// //         <label>New Rate (₹)</label>\r\n// //         <input\r\n// //           type=\"number\"\r\n// //           className=\"form-control\"\r\n// //           value={newRate}\r\n// //           onChange={(e) => setNewRate(e.target.value)}\r\n// //           placeholder=\"Enter new rate\"\r\n// //         />\r\n// //       </div>\r\n\r\n// //       {/* Update Button */}\r\n// //       <button className=\"btn btn-primary\" onClick={handleUpdate}>\r\n// //         Update Rate\r\n// //       </button>\r\n\r\n// //       {/* Display Crop Rate History */}\r\n// //       {history.length > 0 && (\r\n// //         <div className=\"mt-4\">\r\n// //           <h4>Rate Update History</h4>\r\n// //           <table className=\"table table-bordered\">\r\n// //             <thead>\r\n// //               <tr>\r\n// //                 <th>Date</th>\r\n// //                 <th>Old Rate (₹)</th>\r\n// //                 <th>Updated By</th>\r\n// //               </tr>\r\n// //             </thead>\r\n// //             <tbody>\r\n// //               {history.map((entry, index) => (\r\n// //                 <tr key={index}>\r\n// //                   <td>{new Date(entry.RateDate).toLocaleDateString()}</td>\r\n// //                   <td>₹{entry.Rate}</td>\r\n// //                   <td>{entry.UpdatedBy}</td>\r\n// //                 </tr>\r\n// //               ))}\r\n// //             </tbody>\r\n// //           </table>\r\n// //         </div>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default AdminUpdateCrop;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { getCrops, updateCropRate, getCropRateHistory } from \"../service/CropService\";\r\n// import { toast } from \"react-toastify\";\r\n\r\n// function AdminUpdateCrop() {\r\n//   const [crops, setCrops] = useState([]); // Store fetched crops\r\n//   const [selectedCrop, setSelectedCrop] = useState(\"\"); // Store selected crop ID\r\n//   const [newRate, setNewRate] = useState(\"\"); // Store new rate input\r\n//   const [adminUser] = useState(\"Admin123\"); // Admin user (Static)\r\n//   const [history, setHistory] = useState([]); // Store crop rate history\r\n//   const [loading, setLoading] = useState(false); // Loading state\r\n\r\n//   // ✅ Fetch Crops on Component Mount\r\n//   useEffect(() => {\r\n//     fetchCrops();\r\n//   }, []);\r\n\r\n//   // ✅ Fetch All Crops\r\n//   async function fetchCrops() {\r\n//     try {\r\n//       setLoading(true);\r\n//       console.log(\"Fetching crops from API...\");\r\n//       const data = await getCrops();\r\n//       console.log(\"Crops fetched:\", data);\r\n\r\n//       if (!Array.isArray(data)) {\r\n//         throw new Error(\"Invalid API response. Expected an array.\");\r\n//       }\r\n\r\n//       setCrops(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching crops:\", error);\r\n//       toast.error(\"Failed to fetch crops.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   }\r\n\r\n//   // ✅ Fetch Crop Rate History\r\n//   async function fetchHistory(cropId) {\r\n//     const parsedCropId = parseInt(cropId, 10);\r\n\r\n//     if (!parsedCropId || isNaN(parsedCropId)) {\r\n//       console.warn(\"Invalid cropId received:\", cropId);\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       console.log(`Fetching history for Crop ID: ${parsedCropId}`);\r\n//       const data = await getCropRateHistory(parsedCropId);\r\n//       console.log(\"History fetched:\", data);\r\n//       setHistory(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching rate history:\", error);\r\n//       toast.error(\"No rate history found.\");\r\n//       setHistory([]);\r\n//     }\r\n//   }\r\n\r\n//   // ✅ Handle Update Button Click\r\n//   async function handleUpdate() {\r\n//     const parsedCropId = parseInt(selectedCrop, 10);\r\n//     const parsedNewRate = parseInt(newRate, 10);\r\n\r\n//     if (!parsedCropId || isNaN(parsedCropId) || parsedNewRate <= 0) {\r\n//       toast.error(\"Please select a valid crop and enter a valid rate.\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       console.log(`Updating Crop ID: ${parsedCropId} with Rate: ₹${parsedNewRate}`);\r\n//       await updateCropRate(parsedCropId, parsedNewRate, adminUser);\r\n//       toast.success(\"Crop rate updated successfully!\");\r\n//       fetchHistory(parsedCropId); // Refresh History\r\n//     } catch (error) {\r\n//       console.error(\"Error updating crop rate:\", error);\r\n//       toast.error(error.message || \"Failed to update crop rate.\");\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"container mt-4\">\r\n//       <h2 className=\"text-center\">Admin - Update Crop Rate</h2>\r\n\r\n//       {/* Select Crop */}\r\n//       <div className=\"mb-3\">\r\n//         <label>Select Crop</label>\r\n//         <select\r\n//           className=\"form-control\"\r\n//           value={selectedCrop}\r\n//           onChange={(e) => {\r\n//             const cropId = parseInt(e.target.value, 10);\r\n//             setSelectedCrop(cropId);\r\n//             if (cropId > 0) fetchHistory(cropId);\r\n//           }}\r\n//         >\r\n//           <option value=\"\">-- Select Crop --</option>\r\n//           {loading ? (\r\n//             <option disabled>Loading crops...</option>\r\n//           ) : (\r\n//             crops.map((crop) => (\r\n//               <option key={crop.cropId} value={crop.cropId}>\r\n//                 {crop.cropName}\r\n//               </option>\r\n//             ))\r\n//           )}\r\n//         </select>\r\n//       </div>\r\n\r\n//       {/* Enter New Rate */}\r\n//       <div className=\"mb-3\">\r\n//         <label>New Rate (₹)</label>\r\n//         <input\r\n//           type=\"number\"\r\n//           className=\"form-control\"\r\n//           value={newRate}\r\n//           onChange={(e) => setNewRate(e.target.value)}\r\n//           placeholder=\"Enter new rate\"\r\n//         />\r\n//       </div>\r\n\r\n//       {/* Update Button */}\r\n//       <button className=\"btn btn-primary\" onClick={handleUpdate}>\r\n//         Update Rate\r\n//       </button>\r\n\r\n//       {/* Display Crop Rate History */}\r\n//       {history.length > 0 && (\r\n//         <div className=\"mt-4\">\r\n//           <h4>Rate Update History</h4>\r\n//           <table className=\"table table-bordered\">\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Date</th>\r\n//                 <th>Old Rate (₹)</th>\r\n//                 <th>Updated By</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {history.map((entry, index) => (\r\n//                 <tr key={index}>\r\n//                   <td>{new Date(entry.rateDate).toLocaleDateString()}</td>\r\n//                   <td>₹{entry.rate}</td>\r\n//                   <td>{entry.updatedBy}</td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default AdminUpdateCrop;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  getCrops,\r\n  updateCropRate,\r\n  getCropRateHistory,\r\n} from \"../service/CropService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nfunction AdminUpdateCrop() {\r\n  const [crops, setCrops] = useState([]); // Store fetched crops\r\n  const [selectedCrop, setSelectedCrop] = useState(\"\"); // Store selected crop ID\r\n  const [newRate, setNewRate] = useState(\"\"); // Store new rate input\r\n  const [history, setHistory] = useState([]); // Store crop rate history\r\n  const [loading, setLoading] = useState(false); // Loading state\r\n\r\n  // ✅ Retrieve Admin Token from SessionStorage\r\n  const adminToken = sessionStorage.getItem(\"token\");\r\n\r\n  // ✅ Fetch Crops on Component Mount\r\n  useEffect(() => {\r\n    fetchCrops();\r\n  }, []);\r\n\r\n  // ✅ Fetch All Crops\r\n  async function fetchCrops() {\r\n    try {\r\n      setLoading(true);\r\n      const data = await getCrops();\r\n      setCrops(data);\r\n    } catch (error) {\r\n      toast.error(\"Failed to fetch crops.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  // ✅ Fetch Crop Rate History\r\n  async function fetchHistory(cropId) {\r\n    if (!cropId) return;\r\n    try {\r\n      const data = await getCropRateHistory(cropId);\r\n      setHistory(data);\r\n    } catch (error) {\r\n      toast.error(\"No rate history found.\");\r\n      setHistory([]);\r\n    }\r\n  }\r\n\r\n  // ✅ Handle Update Button Click\r\n  async function handleUpdate() {\r\n    if (!selectedCrop || newRate <= 0) {\r\n      toast.error(\"Please select a valid crop and enter a valid rate.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await updateCropRate(selectedCrop, parseInt(newRate), adminToken);\r\n      toast.success(\"Crop rate updated successfully!\");\r\n      fetchHistory(selectedCrop);\r\n    } catch (error) {\r\n      toast.error(error.message || \"Failed to update crop rate.\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h2 className=\"text-center\">Admin - Update Crop Rate</h2>\r\n\r\n      {/* Select Crop */}\r\n      <div className=\"mb-3\">\r\n        <label>Select Crop</label>\r\n        <select\r\n          className=\"form-control\"\r\n          value={selectedCrop}\r\n          onChange={(e) => {\r\n            setSelectedCrop(e.target.value);\r\n            fetchHistory(e.target.value);\r\n          }}\r\n        >\r\n          <option value=\"\">-- Select Crop --</option>\r\n          {crops.map((crop) => (\r\n            <option key={crop.cropId} value={crop.cropId}>\r\n              {crop.cropName}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {/* Enter New Rate */}\r\n      <div className=\"mb-3\">\r\n        <label>New Rate (₹)</label>\r\n        <input\r\n          type=\"number\"\r\n          className=\"form-control\"\r\n          value={newRate}\r\n          onChange={(e) => setNewRate(e.target.value)}\r\n          placeholder=\"Enter new rate\"\r\n        />\r\n      </div>\r\n\r\n      {/* Update Button */}\r\n      <button className=\"btn btn-primary\" onClick={handleUpdate}>\r\n        Update Rate\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminUpdateCrop;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,QAAQ,EACRC,cAAc,EACdC,kBAAkB,QACb,wBAAwB;AAC/B,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/C;EACA,MAAMoB,UAAU,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;;EAElD;EACArB,SAAS,CAAC,MAAM;IACdsB,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,eAAeA,UAAUA,CAAA,EAAG;IAC1B,IAAI;MACFJ,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMK,IAAI,GAAG,MAAMtB,QAAQ,CAAC,CAAC;MAC7BS,QAAQ,CAACa,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdpB,KAAK,CAACoB,KAAK,CAAC,wBAAwB,CAAC;IACvC,CAAC,SAAS;MACRN,UAAU,CAAC,KAAK,CAAC;IACnB;EACF;;EAEA;EACA,eAAeO,YAAYA,CAACC,MAAM,EAAE;IAClC,IAAI,CAACA,MAAM,EAAE;IACb,IAAI;MACF,MAAMH,IAAI,GAAG,MAAMpB,kBAAkB,CAACuB,MAAM,CAAC;MAC7CV,UAAU,CAACO,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdpB,KAAK,CAACoB,KAAK,CAAC,wBAAwB,CAAC;MACrCR,UAAU,CAAC,EAAE,CAAC;IAChB;EACF;;EAEA;EACA,eAAeW,YAAYA,CAAA,EAAG;IAC5B,IAAI,CAAChB,YAAY,IAAIE,OAAO,IAAI,CAAC,EAAE;MACjCT,KAAK,CAACoB,KAAK,CAAC,oDAAoD,CAAC;MACjE;IACF;IAEA,IAAI;MACF,MAAMtB,cAAc,CAACS,YAAY,EAAEiB,QAAQ,CAACf,OAAO,CAAC,EAAEM,UAAU,CAAC;MACjEf,KAAK,CAACyB,OAAO,CAAC,iCAAiC,CAAC;MAChDJ,YAAY,CAACd,YAAY,CAAC;IAC5B,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdpB,KAAK,CAACoB,KAAK,CAACA,KAAK,CAACM,OAAO,IAAI,6BAA6B,CAAC;IAC7D;EACF;EAEA,oBACExB,OAAA;IAAKyB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B1B,OAAA;MAAIyB,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGzD9B,OAAA;MAAKyB,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnB1B,OAAA;QAAA0B,QAAA,EAAO;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC1B9B,OAAA;QACEyB,SAAS,EAAC,cAAc;QACxBM,KAAK,EAAE1B,YAAa;QACpB2B,QAAQ,EAAGC,CAAC,IAAK;UACf3B,eAAe,CAAC2B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;UAC/BZ,YAAY,CAACc,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;QAC9B,CAAE;QAAAL,QAAA,gBAEF1B,OAAA;UAAQ+B,KAAK,EAAC,EAAE;UAAAL,QAAA,EAAC;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAC1C3B,KAAK,CAACgC,GAAG,CAAEC,IAAI,iBACdpC,OAAA;UAA0B+B,KAAK,EAAEK,IAAI,CAAChB,MAAO;UAAAM,QAAA,EAC1CU,IAAI,CAACC;QAAQ,GADHD,IAAI,CAAChB,MAAM;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEhB,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAGN9B,OAAA;MAAKyB,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnB1B,OAAA;QAAA0B,QAAA,EAAO;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC3B9B,OAAA;QACEsC,IAAI,EAAC,QAAQ;QACbb,SAAS,EAAC,cAAc;QACxBM,KAAK,EAAExB,OAAQ;QACfyB,QAAQ,EAAGC,CAAC,IAAKzB,UAAU,CAACyB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC5CQ,WAAW,EAAC;MAAgB;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAGN9B,OAAA;MAAQyB,SAAS,EAAC,iBAAiB;MAACe,OAAO,EAAEnB,YAAa;MAAAK,QAAA,EAAC;IAE3D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAC5B,EAAA,CAlGQD,eAAe;AAAAwC,EAAA,GAAfxC,eAAe;AAoGxB,eAAeA,eAAe;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}