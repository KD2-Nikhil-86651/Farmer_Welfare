{"ast":null,"code":"// import axios from \"axios\";\n\n// const API_URL = \"https://localhost:7299/api/Crops\"; // Adjust this based on your backend\n\n// // ✅ Get all crops\n// export async function getCrops() {\n//   try {\n//     const response = await axios.get(`${API_URL}`);\n//     return response.data.data; // Returns crop list\n//   } catch (error) {\n//     console.error(\"Error fetching crops:\", error.response?.data || error);\n//     throw error.response?.data || error;\n//   }\n// }\n\n// // ✅ Update crop rate (Admin only)\n// export async function updateCropRate(cropId, newRate, adminUser) {\n//   try {\n//     const response = await axios.post(`${API_URL}/update-rate`, {\n//       CropId: cropId,\n//       NewRate: newRate,\n//       AdminUser: adminUser,\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error updating crop rate:\", error.response?.data || error);\n//     throw error.response?.data || error;\n//   }\n// }\n\n// // ✅ Get crop rate history\n// export async function getCropRateHistory(cropId) {\n//   try {\n//     const response = await axios.get(`${API_URL}/rate-history/${cropId}`);\n//     return response.data.data; // Returns history list\n//   } catch (error) {\n//     console.error(\"Error fetching rate history:\", error.response?.data || error);\n//     throw error.response?.data || error;\n//   }\n// }\n\n// import axios from \"axios\";\n\n// const API_URL = \"https://localhost:7299/api/Crops\"; // Adjust this based on your backend\n\n// // ✅ Get admin token from sessionStorage\n// const getAuthHeaders = () => {\n//   const token = sessionStorage.getItem(\"token\");\n//   return token ? { Authorization: `Bearer ${token}` } : {}; // ✅ Send token in the headers\n// };\n\n// // ✅ Get all crops\n// export async function getCrops() {\n//   try {\n//     const response = await axios.get(`${API_URL}`, { headers: getAuthHeaders() });\n//     return response.data.data; // Returns crop list\n//   } catch (error) {\n//     console.error(\"Error fetching crops:\", error.response?.data || error);\n//     throw error.response?.data || error;\n//   }\n// }\n\n// // ✅ Update crop rate (Admin only)\n// export async function updateCropRate(cropId, newRate) {\n//   try {\n//     const response = await axios.post(\n//       `${API_URL}/update-rate`,\n//       { cropId, newRate }, // Send cropId and newRate in body\n//       { headers: getAuthHeaders() } // ✅ Send token in headers\n//     );\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error updating crop rate:\", error.response?.data || error);\n//     throw error.response?.data || error;\n//   }\n// }\n\n// // ✅ Get crop rate history\n// export async function getCropRateHistory(cropId) {\n//   try {\n//     const response = await axios.get(`${API_URL}/rate-history/${cropId}`, { headers: getAuthHeaders() });\n//     return response.data.data; // Returns history list\n//   } catch (error) {\n//     console.error(\"Error fetching rate history:\", error.response?.data || error);\n//     throw error.response?.data || error;\n//   }\n// }\n\nimport axios from \"axios\";\nconst API_URL = \"https://localhost:7299/api/Crops\"; // Adjust this based on your backend\n\n// ✅ Get admin token & name from sessionStorage\nconst getAuthHeaders = () => {\n  const token = sessionStorage.getItem(\"token\");\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\n\n// ✅ Get all crops from backend\nexport async function getCrops() {\n  try {\n    console.log(\"Fetching crops...\");\n    const response = await axios.get(`${API_URL}`, {\n      headers: getAuthHeaders()\n    });\n    if (response.data && response.data.data) {\n      console.log(\"Crops retrieved:\", response.data.data);\n      return response.data.data; // Returns crop list\n    } else {\n      throw new Error(\"Invalid response from server.\");\n    }\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error(\"Error fetching crops:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error;\n  }\n}\n\n// ✅ Update crop rate (Admin only)\nexport async function updateCropRate(cropId, newRate) {\n  const adminUser = sessionStorage.getItem(\"username\"); // ✅ Retrieve admin username\n\n  if (!adminUser) {\n    throw new Error(\"Admin username is missing. Please log in again.\");\n  }\n  try {\n    console.log(`Updating crop ID: ${cropId} with new rate: ₹${newRate}`);\n    const response = await axios.post(`${API_URL}/update-rate`, {\n      cropId,\n      newRate,\n      adminUser\n    },\n    // ✅ Send cropId, newRate, and adminUser\n    {\n      headers: getAuthHeaders()\n    } // ✅ Include token in headers\n    );\n    console.log(\"Crop rate updated successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response4;\n    console.error(\"Error updating crop rate:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error;\n  }\n}\n\n// ✅ Get crop rate history\nexport async function getCropRateHistory(cropId) {\n  try {\n    console.log(`Fetching rate history for crop ID: ${cropId}`);\n    const response = await axios.get(`${API_URL}/rate-history/${cropId}`, {\n      headers: getAuthHeaders()\n    });\n    if (response.data && response.data.data) {\n      console.log(\"Rate history retrieved:\", response.data.data);\n      return response.data.data; // Returns history list\n    } else {\n      throw new Error(\"Invalid response from server.\");\n    }\n  } catch (error) {\n    var _error$response5, _error$response6;\n    console.error(\"Error fetching rate history:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error);\n    throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error;\n  }\n}","map":{"version":3,"names":["axios","API_URL","getAuthHeaders","token","sessionStorage","getItem","Authorization","getCrops","console","log","response","get","headers","data","Error","error","_error$response","_error$response2","updateCropRate","cropId","newRate","adminUser","post","_error$response3","_error$response4","getCropRateHistory","_error$response5","_error$response6"],"sources":["D:/Nikhil/Downloads/CDAC Project/FarmerFrontend/src/service/CropService.js"],"sourcesContent":["// import axios from \"axios\";\r\n\r\n// const API_URL = \"https://localhost:7299/api/Crops\"; // Adjust this based on your backend\r\n\r\n// // ✅ Get all crops\r\n// export async function getCrops() {\r\n//   try {\r\n//     const response = await axios.get(`${API_URL}`);\r\n//     return response.data.data; // Returns crop list\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching crops:\", error.response?.data || error);\r\n//     throw error.response?.data || error;\r\n//   }\r\n// }\r\n\r\n// // ✅ Update crop rate (Admin only)\r\n// export async function updateCropRate(cropId, newRate, adminUser) {\r\n//   try {\r\n//     const response = await axios.post(`${API_URL}/update-rate`, {\r\n//       CropId: cropId,\r\n//       NewRate: newRate,\r\n//       AdminUser: adminUser,\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error updating crop rate:\", error.response?.data || error);\r\n//     throw error.response?.data || error;\r\n//   }\r\n// }\r\n\r\n// // ✅ Get crop rate history\r\n// export async function getCropRateHistory(cropId) {\r\n//   try {\r\n//     const response = await axios.get(`${API_URL}/rate-history/${cropId}`);\r\n//     return response.data.data; // Returns history list\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching rate history:\", error.response?.data || error);\r\n//     throw error.response?.data || error;\r\n//   }\r\n// }\r\n\r\n// import axios from \"axios\";\r\n\r\n// const API_URL = \"https://localhost:7299/api/Crops\"; // Adjust this based on your backend\r\n\r\n// // ✅ Get admin token from sessionStorage\r\n// const getAuthHeaders = () => {\r\n//   const token = sessionStorage.getItem(\"token\");\r\n//   return token ? { Authorization: `Bearer ${token}` } : {}; // ✅ Send token in the headers\r\n// };\r\n\r\n// // ✅ Get all crops\r\n// export async function getCrops() {\r\n//   try {\r\n//     const response = await axios.get(`${API_URL}`, { headers: getAuthHeaders() });\r\n//     return response.data.data; // Returns crop list\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching crops:\", error.response?.data || error);\r\n//     throw error.response?.data || error;\r\n//   }\r\n// }\r\n\r\n// // ✅ Update crop rate (Admin only)\r\n// export async function updateCropRate(cropId, newRate) {\r\n//   try {\r\n//     const response = await axios.post(\r\n//       `${API_URL}/update-rate`,\r\n//       { cropId, newRate }, // Send cropId and newRate in body\r\n//       { headers: getAuthHeaders() } // ✅ Send token in headers\r\n//     );\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error updating crop rate:\", error.response?.data || error);\r\n//     throw error.response?.data || error;\r\n//   }\r\n// }\r\n\r\n// // ✅ Get crop rate history\r\n// export async function getCropRateHistory(cropId) {\r\n//   try {\r\n//     const response = await axios.get(`${API_URL}/rate-history/${cropId}`, { headers: getAuthHeaders() });\r\n//     return response.data.data; // Returns history list\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching rate history:\", error.response?.data || error);\r\n//     throw error.response?.data || error;\r\n//   }\r\n// }\r\n\r\n\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"https://localhost:7299/api/Crops\"; // Adjust this based on your backend\r\n\r\n// ✅ Get admin token & name from sessionStorage\r\nconst getAuthHeaders = () => {\r\n  const token = sessionStorage.getItem(\"token\");\r\n  return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\n// ✅ Get all crops from backend\r\nexport async function getCrops() {\r\n  try {\r\n    console.log(\"Fetching crops...\");\r\n    const response = await axios.get(`${API_URL}`, { headers: getAuthHeaders() });\r\n    \r\n    if (response.data && response.data.data) {\r\n      console.log(\"Crops retrieved:\", response.data.data);\r\n      return response.data.data; // Returns crop list\r\n    } else {\r\n      throw new Error(\"Invalid response from server.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching crops:\", error.response?.data || error);\r\n    throw error.response?.data || error;\r\n  }\r\n}\r\n\r\n// ✅ Update crop rate (Admin only)\r\nexport async function updateCropRate(cropId, newRate) {\r\n  const adminUser = sessionStorage.getItem(\"username\"); // ✅ Retrieve admin username\r\n\r\n  if (!adminUser) {\r\n    throw new Error(\"Admin username is missing. Please log in again.\");\r\n  }\r\n\r\n  try {\r\n    console.log(`Updating crop ID: ${cropId} with new rate: ₹${newRate}`);\r\n\r\n    const response = await axios.post(\r\n      `${API_URL}/update-rate`,\r\n      { cropId, newRate, adminUser }, // ✅ Send cropId, newRate, and adminUser\r\n      { headers: getAuthHeaders() } // ✅ Include token in headers\r\n    );\r\n\r\n    console.log(\"Crop rate updated successfully:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error updating crop rate:\", error.response?.data || error);\r\n    throw error.response?.data || error;\r\n  }\r\n}\r\n\r\n// ✅ Get crop rate history\r\nexport async function getCropRateHistory(cropId) {\r\n  try {\r\n    console.log(`Fetching rate history for crop ID: ${cropId}`);\r\n    \r\n    const response = await axios.get(`${API_URL}/rate-history/${cropId}`, { headers: getAuthHeaders() });\r\n\r\n    if (response.data && response.data.data) {\r\n      console.log(\"Rate history retrieved:\", response.data.data);\r\n      return response.data.data; // Returns history list\r\n    } else {\r\n      throw new Error(\"Invalid response from server.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching rate history:\", error.response?.data || error);\r\n    throw error.response?.data || error;\r\n  }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}