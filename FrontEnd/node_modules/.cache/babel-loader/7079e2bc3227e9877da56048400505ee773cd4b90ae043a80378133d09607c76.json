{"ast":null,"code":"var _jsxFileName = \"D:\\\\Nikhil\\\\Downloads\\\\CDAC Project\\\\FarmerFrontend\\\\src\\\\screens\\\\AdminUpdateCrop.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { getCrops, updateCropRate, getCropRateHistory } from \"../service/CropService\";\n// import { toast } from \"react-toastify\";\n\n// function AdminUpdateCrop() {\n//   const [crops, setCrops] = useState([]);\n//   const [selectedCrop, setSelectedCrop] = useState(\"\");\n//   const [newRate, setNewRate] = useState(\"\");\n//   const [adminUser] = useState(\"Admin123\");\n//   const [history, setHistory] = useState([]);\n\n//   useEffect(() => {\n//     fetchCrops();\n//   }, []);\n\n//   // ✅ Fetch Crops\n//   async function fetchCrops() {\n//     try {\n//       console.log(\"Fetching crops...\"); // ✅ Debugging log\n//       const data = await getCrops();\n//       console.log(\"Crops fetched successfully:\", data); // ✅ Log the response\n//       setCrops(data);\n//     } catch (error) {\n//       console.error(\"Error fetching crops:\", error);\n//       toast.error(\"Failed to fetch crops.\");\n//     }\n//   }\n\n//   // ✅ Fetch Crop Rate History\n//   async function fetchHistory(cropId) {\n//     const parsedCropId = parseInt(cropId); // ✅ Convert to number\n\n//     if (!parsedCropId || isNaN(parsedCropId)) {\n//       console.warn(\"Invalid cropId received:\", cropId);\n//       return;\n//     }\n\n//     try {\n//       console.log(`Fetching history for Crop ID: ${parsedCropId}`); // ✅ Debugging\n//       const data = await getCropRateHistory(parsedCropId);\n//       console.log(\"History fetched successfully:\", data); // ✅ Log API response\n//       setHistory(data);\n//     } catch (error) {\n//       console.error(\"Error fetching rate history:\", error);\n//       toast.error(\"No rate history found.\");\n//       setHistory([]);\n//     }\n//   }\n\n//   // ✅ Handle Update Button Click\n//   async function handleUpdate() {\n//     const parsedCropId = parseInt(selectedCrop); // ✅ Convert to number\n\n//     if (!parsedCropId || isNaN(parsedCropId) || newRate <= 0) {\n//       toast.error(\"Please select a valid crop and enter a valid rate.\");\n//       return;\n//     }\n\n//     try {\n//       console.log(`Updating Crop ID: ${parsedCropId} with Rate: ₹${newRate}`); // ✅ Debugging\n//       await updateCropRate(parsedCropId, parseInt(newRate), adminUser);\n//       toast.success(\"Crop rate updated successfully!\");\n//       fetchHistory(parsedCropId); // ✅ Refresh History\n//     } catch (error) {\n//       console.error(\"Error updating crop rate:\", error);\n//       toast.error(error.message || \"Failed to update crop rate.\");\n//     }\n//   }\n\n//   return (\n//     <div className=\"container mt-4\">\n//       <h2 className=\"text-center\">Admin - Update Crop Rate</h2>\n\n//       {/* Select Crop */}\n//       <div className=\"mb-3\">\n//         <label>Select Crop</label>\n//         <select\n//           className=\"form-control\"\n//           value={selectedCrop}\n//           onChange={(e) => {\n//             const cropId = parseInt(e.target.value); // ✅ Convert to number\n//             setSelectedCrop(cropId);\n//             if (cropId > 0) fetchHistory(cropId); // ✅ Prevent invalid API calls\n//           }}\n//         >\n//           <option value=\"\">-- Select Crop --</option>\n//           {crops.map((crop) => (\n//             <option key={crop.CropId} value={crop.CropId}>\n//               {crop.CropName} - ₹{crop.Rate}\n//             </option>\n//           ))}\n//         </select>\n//       </div>\n\n//       {/* Enter New Rate */}\n//       <div className=\"mb-3\">\n//         <label>New Rate (₹)</label>\n//         <input\n//           type=\"number\"\n//           className=\"form-control\"\n//           value={newRate}\n//           onChange={(e) => setNewRate(e.target.value)}\n//           placeholder=\"Enter new rate\"\n//         />\n//       </div>\n\n//       {/* Update Button */}\n//       <button className=\"btn btn-primary\" onClick={handleUpdate}>\n//         Update Rate\n//       </button>\n\n//       {/* Display Crop Rate History */}\n//       {history.length > 0 && (\n//         <div className=\"mt-4\">\n//           <h4>Rate Update History</h4>\n//           <table className=\"table table-bordered\">\n//             <thead>\n//               <tr>\n//                 <th>Date</th>\n//                 <th>Old Rate (₹)</th>\n//                 <th>Updated By</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {history.map((entry, index) => (\n//                 <tr key={index}>\n//                   <td>{new Date(entry.RateDate).toLocaleDateString()}</td>\n//                   <td>₹{entry.Rate}</td>\n//                   <td>{entry.UpdatedBy}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default AdminUpdateCrop;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\"; // ✅ Import for navigation\n// import { getCrops, updateCropRate, getCropRateHistory } from \"../service/CropService\";\n// import { toast } from \"react-toastify\";\n// import Navbar from \"../components/Navbar\"; // ✅ Import Navbar\n\n// function AdminUpdateCrop() {\n//   const [crops, setCrops] = useState([]); // Store fetched crops\n//   const [selectedCrop, setSelectedCrop] = useState(\"\"); // Store selected crop ID\n//   const [newRate, setNewRate] = useState(\"\"); // Store new rate input\n//   const [adminUser] = useState(\"Admin\"); // Admin user (Static)\n//   const [history, setHistory] = useState([]); // Store crop rate history\n//   const [loading, setLoading] = useState(false); // Loading state\n//   const navigate = useNavigate(); // ✅ Hook for navigation\n\n//   // ✅ Fetch Crops on Component Mount\n//   useEffect(() => {\n//     fetchCrops();\n//   }, []);\n\n//   // ✅ Fetch All Crops\n//   async function fetchCrops() {\n//     try {\n//       setLoading(true);\n//       console.log(\"Fetching crops from API...\");\n//       const data = await getCrops();\n//       console.log(\"Crops fetched:\", data);\n\n//       if (!Array.isArray(data)) {\n//         throw new Error(\"Invalid API response. Expected an array.\");\n//       }\n\n//       setCrops(data);\n//     } catch (error) {\n//       console.error(\"Error fetching crops:\", error);\n//       toast.error(\"Failed to fetch crops.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   }\n\n//   // ✅ Fetch Crop Rate History\n//   async function fetchHistory(cropId) {\n//     const parsedCropId = parseInt(cropId, 10);\n\n//     if (!parsedCropId || isNaN(parsedCropId)) {\n//       console.warn(\"Invalid cropId received:\", cropId);\n//       return;\n//     }\n\n//     try {\n//       console.log(`Fetching history for Crop ID: ${parsedCropId}`);\n//       const data = await getCropRateHistory(parsedCropId);\n//       console.log(\"History fetched:\", data);\n//       setHistory(data);\n//     } catch (error) {\n//       console.error(\"Error fetching rate history:\", error);\n//       toast.error(\"No rate history found.\");\n//       setHistory([]);\n//     }\n//   }\n\n//   // ✅ Handle Update Button Click\n//   async function handleUpdate() {\n//     const parsedCropId = parseInt(selectedCrop, 10);\n//     const parsedNewRate = parseInt(newRate, 10);\n\n//     if (!parsedCropId || isNaN(parsedCropId) || parsedNewRate <= 0) {\n//       toast.error(\"Please select a valid crop and enter a valid rate.\");\n//       return;\n//     }\n\n//     try {\n//       console.log(`Updating Crop ID: ${parsedCropId} with Rate: ₹${parsedNewRate}`);\n//       await updateCropRate(parsedCropId, parsedNewRate, adminUser);\n//       toast.success(\"Crop rate updated successfully!\");\n//       fetchHistory(parsedCropId); // Refresh History\n//     } catch (error) {\n//       console.error(\"Error updating crop rate:\", error);\n//       toast.error(error.message || \"Failed to update crop rate.\");\n//     }\n//   }\n\n//   return (\n//     <div>\n//       {/* ✅ Add Navbar */}\n//       <Navbar /><br /><br /><br />\n\n//       <div className=\"container mt-4\">\n//         <h2 className=\"text-center\">Admin - Update Crop Rate</h2>\n\n//         {/* Select Crop */}\n//         <div className=\"mb-3\">\n//           <label className=\"form-label\"><strong>Select Crop</strong></label>\n//           <select\n//             className=\"form-control\"\n//             value={selectedCrop}\n//             onChange={(e) => {\n//               const cropId = parseInt(e.target.value, 10);\n//               setSelectedCrop(cropId);\n//               if (cropId > 0) fetchHistory(cropId);\n//             }}\n//           >\n//             <option value=\"\">-- Select Crop --</option>\n//             {loading ? (\n//               <option disabled>Loading crops...</option>\n//             ) : (\n//               crops.map((crop) => (\n//                 <option key={crop.cropId} value={crop.cropId}>\n//                   {crop.cropName}\n//                 </option>\n//               ))\n//             )}\n//           </select>\n//         </div>\n\n//         {/* Enter New Rate */}\n//         <div className=\"mb-3\">\n//           <label className=\"form-label\"><strong>New Rate (₹)</strong></label>\n//           <input\n//             type=\"number\"\n//             className=\"form-control\"\n//             value={newRate}\n//             onChange={(e) => setNewRate(e.target.value)}\n//             placeholder=\"Enter new rate\"\n//           />\n//         </div>\n\n//         {/* Buttons */}\n//         <div className=\"d-flex justify-content-between\">\n//           <button className=\"btn btn-primary\" onClick={handleUpdate}>\n//             Update Rate\n//           </button>\n\n//           {/* ✅ Back to Admin Dashboard Button */}\n//           <button className=\"btn btn-secondary\" onClick={() => navigate(\"/AdminDashboard\")}>\n//             Back to Admin Dashboard\n//           </button>\n//         </div>\n\n//         {/* Display Crop Rate History */}\n//         {history.length > 0 && (\n//           <div className=\"mt-4\">\n//             <h4>Rate Update History</h4>\n//             <table className=\"table table-bordered\">\n//               <thead>\n//                 <tr>\n//                   <th>Date</th>\n//                   <th>Old Rate (₹)</th>\n//                   <th>Updated By</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {history.map((entry, index) => (\n//                   <tr key={index}>\n//                     <td>{new Date(entry.rateDate).toLocaleDateString()}</td>\n//                     <td>₹{entry.rate}</td>\n//                     <td>{entry.updatedBy}</td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default AdminUpdateCrop;\n\nimport React, { useState, useEffect } from \"react\";\nimport { getCrops, updateCropRate, getCropRateHistory } from \"../service/CropService\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminUpdateCrop() {\n  _s();\n  const [crops, setCrops] = useState([]); // Store crop list\n  const [selectedCrop, setSelectedCrop] = useState(\"\"); // Selected crop ID\n  const [newRate, setNewRate] = useState(\"\"); // New rate input\n  const [history, setHistory] = useState([]); // Store crop rate history\n  const [loading, setLoading] = useState(false); // Loading state\n\n  // ✅ Retrieve Admin Token from SessionStorage\n  const adminToken = sessionStorage.getItem(\"token\");\n\n  // ✅ Fetch Crops on Component Mount\n  useEffect(() => {\n    fetchCrops();\n  }, []);\n\n  // ✅ Fetch All Crops\n  async function fetchCrops() {\n    try {\n      setLoading(true);\n      console.log(\"Fetching crops from API...\");\n      const data = await getCrops();\n      console.log(\"Crops fetched:\", data);\n      if (!Array.isArray(data)) {\n        throw new Error(\"Invalid API response. Expected an array.\");\n      }\n      setCrops(data);\n    } catch (error) {\n      console.error(\"Error fetching crops:\", error);\n      toast.error(\"Failed to fetch crops.\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // ✅ Fetch Crop Rate History\n  async function fetchHistory(cropId) {\n    const parsedCropId = parseInt(cropId, 10);\n    if (!parsedCropId || isNaN(parsedCropId)) {\n      console.warn(\"Invalid cropId received:\", cropId);\n      return;\n    }\n    try {\n      console.log(`Fetching history for Crop ID: ${parsedCropId}`);\n      const data = await getCropRateHistory(parsedCropId);\n      console.log(\"History fetched:\", data);\n      setHistory(data);\n    } catch (error) {\n      console.error(\"Error fetching rate history:\", error);\n      toast.error(\"No rate history found.\");\n      setHistory([]);\n    }\n  }\n\n  // ✅ Handle Update Button Click\n  async function handleUpdate() {\n    const parsedCropId = parseInt(selectedCrop, 10);\n    const parsedNewRate = parseInt(newRate, 10);\n    if (!parsedCropId || isNaN(parsedCropId)) {\n      toast.error(\"Please select a valid crop.\");\n      console.error(\"Invalid Crop ID:\", selectedCrop);\n      return;\n    }\n    if (!parsedNewRate || isNaN(parsedNewRate) || parsedNewRate <= 0) {\n      toast.error(\"Please enter a valid rate.\");\n      console.error(\"Invalid Rate:\", newRate);\n      return;\n    }\n    console.log(\"Sending Data:\", {\n      CropId: parsedCropId,\n      NewRate: parsedNewRate,\n      AdminToken: adminToken // Debugging token\n    });\n    try {\n      await updateCropRate(parsedCropId, parsedNewRate, adminToken);\n      toast.success(\"Crop rate updated successfully!\");\n      fetchHistory(parsedCropId); // ✅ Refresh History\n      fetchCrops(); // ✅ Refresh crop list\n    } catch (error) {\n      console.error(\"Error updating crop rate:\", error);\n      toast.error(error.message || \"Failed to update crop rate.\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Admin - Update Crop Rate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Crop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-control\",\n        value: selectedCrop,\n        onChange: e => {\n          const cropId = parseInt(e.target.value, 10);\n          setSelectedCrop(cropId);\n          if (cropId > 0) fetchHistory(cropId);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select Crop --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          children: \"Loading crops...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }, this) : crops.map(crop => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: crop.cropId,\n          children: [crop.cropName, \" - \\u20B9\", crop.rate]\n        }, crop.cropId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"New Rate (\\u20B9)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: \"form-control\",\n        value: newRate,\n        onChange: e => setNewRate(e.target.value),\n        placeholder: \"Enter new rate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary mt-2\",\n      onClick: handleUpdate,\n      children: \"Update Rate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Rate Update History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-bordered\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Old Rate (\\u20B9)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Updated By\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: history.map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(entry.rateDate).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\"\\u20B9\", entry.rate]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entry.updatedBy\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 414,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminUpdateCrop, \"XYQ5CsuKBR1AAoPT4+kh8OsWuDA=\");\n_c = AdminUpdateCrop;\nexport default AdminUpdateCrop;\nvar _c;\n$RefreshReg$(_c, \"AdminUpdateCrop\");","map":{"version":3,"names":["React","useState","useEffect","getCrops","updateCropRate","getCropRateHistory","toast","jsxDEV","_jsxDEV","AdminUpdateCrop","_s","crops","setCrops","selectedCrop","setSelectedCrop","newRate","setNewRate","history","setHistory","loading","setLoading","adminToken","sessionStorage","getItem","fetchCrops","console","log","data","Array","isArray","Error","error","fetchHistory","cropId","parsedCropId","parseInt","isNaN","warn","handleUpdate","parsedNewRate","CropId","NewRate","AdminToken","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","disabled","map","crop","cropName","rate","type","placeholder","onClick","length","entry","index","Date","rateDate","toLocaleDateString","updatedBy","_c","$RefreshReg$"],"sources":["D:/Nikhil/Downloads/CDAC Project/FarmerFrontend/src/screens/AdminUpdateCrop.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { getCrops, updateCropRate, getCropRateHistory } from \"../service/CropService\";\r\n// import { toast } from \"react-toastify\";\r\n\r\n// function AdminUpdateCrop() {\r\n//   const [crops, setCrops] = useState([]);\r\n//   const [selectedCrop, setSelectedCrop] = useState(\"\");\r\n//   const [newRate, setNewRate] = useState(\"\");\r\n//   const [adminUser] = useState(\"Admin123\");\r\n//   const [history, setHistory] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     fetchCrops();\r\n//   }, []);\r\n\r\n//   // ✅ Fetch Crops\r\n//   async function fetchCrops() {\r\n//     try {\r\n//       console.log(\"Fetching crops...\"); // ✅ Debugging log\r\n//       const data = await getCrops();\r\n//       console.log(\"Crops fetched successfully:\", data); // ✅ Log the response\r\n//       setCrops(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching crops:\", error);\r\n//       toast.error(\"Failed to fetch crops.\");\r\n//     }\r\n//   }\r\n\r\n//   // ✅ Fetch Crop Rate History\r\n//   async function fetchHistory(cropId) {\r\n//     const parsedCropId = parseInt(cropId); // ✅ Convert to number\r\n\r\n//     if (!parsedCropId || isNaN(parsedCropId)) {\r\n//       console.warn(\"Invalid cropId received:\", cropId);\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       console.log(`Fetching history for Crop ID: ${parsedCropId}`); // ✅ Debugging\r\n//       const data = await getCropRateHistory(parsedCropId);\r\n//       console.log(\"History fetched successfully:\", data); // ✅ Log API response\r\n//       setHistory(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching rate history:\", error);\r\n//       toast.error(\"No rate history found.\");\r\n//       setHistory([]);\r\n//     }\r\n//   }\r\n\r\n//   // ✅ Handle Update Button Click\r\n//   async function handleUpdate() {\r\n//     const parsedCropId = parseInt(selectedCrop); // ✅ Convert to number\r\n\r\n//     if (!parsedCropId || isNaN(parsedCropId) || newRate <= 0) {\r\n//       toast.error(\"Please select a valid crop and enter a valid rate.\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       console.log(`Updating Crop ID: ${parsedCropId} with Rate: ₹${newRate}`); // ✅ Debugging\r\n//       await updateCropRate(parsedCropId, parseInt(newRate), adminUser);\r\n//       toast.success(\"Crop rate updated successfully!\");\r\n//       fetchHistory(parsedCropId); // ✅ Refresh History\r\n//     } catch (error) {\r\n//       console.error(\"Error updating crop rate:\", error);\r\n//       toast.error(error.message || \"Failed to update crop rate.\");\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"container mt-4\">\r\n//       <h2 className=\"text-center\">Admin - Update Crop Rate</h2>\r\n\r\n//       {/* Select Crop */}\r\n//       <div className=\"mb-3\">\r\n//         <label>Select Crop</label>\r\n//         <select\r\n//           className=\"form-control\"\r\n//           value={selectedCrop}\r\n//           onChange={(e) => {\r\n//             const cropId = parseInt(e.target.value); // ✅ Convert to number\r\n//             setSelectedCrop(cropId);\r\n//             if (cropId > 0) fetchHistory(cropId); // ✅ Prevent invalid API calls\r\n//           }}\r\n//         >\r\n//           <option value=\"\">-- Select Crop --</option>\r\n//           {crops.map((crop) => (\r\n//             <option key={crop.CropId} value={crop.CropId}>\r\n//               {crop.CropName} - ₹{crop.Rate}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n\r\n//       {/* Enter New Rate */}\r\n//       <div className=\"mb-3\">\r\n//         <label>New Rate (₹)</label>\r\n//         <input\r\n//           type=\"number\"\r\n//           className=\"form-control\"\r\n//           value={newRate}\r\n//           onChange={(e) => setNewRate(e.target.value)}\r\n//           placeholder=\"Enter new rate\"\r\n//         />\r\n//       </div>\r\n\r\n//       {/* Update Button */}\r\n//       <button className=\"btn btn-primary\" onClick={handleUpdate}>\r\n//         Update Rate\r\n//       </button>\r\n\r\n//       {/* Display Crop Rate History */}\r\n//       {history.length > 0 && (\r\n//         <div className=\"mt-4\">\r\n//           <h4>Rate Update History</h4>\r\n//           <table className=\"table table-bordered\">\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Date</th>\r\n//                 <th>Old Rate (₹)</th>\r\n//                 <th>Updated By</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {history.map((entry, index) => (\r\n//                 <tr key={index}>\r\n//                   <td>{new Date(entry.RateDate).toLocaleDateString()}</td>\r\n//                   <td>₹{entry.Rate}</td>\r\n//                   <td>{entry.UpdatedBy}</td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default AdminUpdateCrop;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\"; // ✅ Import for navigation\r\n// import { getCrops, updateCropRate, getCropRateHistory } from \"../service/CropService\";\r\n// import { toast } from \"react-toastify\";\r\n// import Navbar from \"../components/Navbar\"; // ✅ Import Navbar\r\n\r\n// function AdminUpdateCrop() {\r\n//   const [crops, setCrops] = useState([]); // Store fetched crops\r\n//   const [selectedCrop, setSelectedCrop] = useState(\"\"); // Store selected crop ID\r\n//   const [newRate, setNewRate] = useState(\"\"); // Store new rate input\r\n//   const [adminUser] = useState(\"Admin\"); // Admin user (Static)\r\n//   const [history, setHistory] = useState([]); // Store crop rate history\r\n//   const [loading, setLoading] = useState(false); // Loading state\r\n//   const navigate = useNavigate(); // ✅ Hook for navigation\r\n\r\n//   // ✅ Fetch Crops on Component Mount\r\n//   useEffect(() => {\r\n//     fetchCrops();\r\n//   }, []);\r\n\r\n//   // ✅ Fetch All Crops\r\n//   async function fetchCrops() {\r\n//     try {\r\n//       setLoading(true);\r\n//       console.log(\"Fetching crops from API...\");\r\n//       const data = await getCrops();\r\n//       console.log(\"Crops fetched:\", data);\r\n\r\n//       if (!Array.isArray(data)) {\r\n//         throw new Error(\"Invalid API response. Expected an array.\");\r\n//       }\r\n\r\n//       setCrops(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching crops:\", error);\r\n//       toast.error(\"Failed to fetch crops.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   }\r\n\r\n//   // ✅ Fetch Crop Rate History\r\n//   async function fetchHistory(cropId) {\r\n//     const parsedCropId = parseInt(cropId, 10);\r\n\r\n//     if (!parsedCropId || isNaN(parsedCropId)) {\r\n//       console.warn(\"Invalid cropId received:\", cropId);\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       console.log(`Fetching history for Crop ID: ${parsedCropId}`);\r\n//       const data = await getCropRateHistory(parsedCropId);\r\n//       console.log(\"History fetched:\", data);\r\n//       setHistory(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching rate history:\", error);\r\n//       toast.error(\"No rate history found.\");\r\n//       setHistory([]);\r\n//     }\r\n//   }\r\n\r\n//   // ✅ Handle Update Button Click\r\n//   async function handleUpdate() {\r\n//     const parsedCropId = parseInt(selectedCrop, 10);\r\n//     const parsedNewRate = parseInt(newRate, 10);\r\n\r\n//     if (!parsedCropId || isNaN(parsedCropId) || parsedNewRate <= 0) {\r\n//       toast.error(\"Please select a valid crop and enter a valid rate.\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       console.log(`Updating Crop ID: ${parsedCropId} with Rate: ₹${parsedNewRate}`);\r\n//       await updateCropRate(parsedCropId, parsedNewRate, adminUser);\r\n//       toast.success(\"Crop rate updated successfully!\");\r\n//       fetchHistory(parsedCropId); // Refresh History\r\n//     } catch (error) {\r\n//       console.error(\"Error updating crop rate:\", error);\r\n//       toast.error(error.message || \"Failed to update crop rate.\");\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       {/* ✅ Add Navbar */}\r\n//       <Navbar /><br /><br /><br />\r\n\r\n//       <div className=\"container mt-4\">\r\n//         <h2 className=\"text-center\">Admin - Update Crop Rate</h2>\r\n\r\n//         {/* Select Crop */}\r\n//         <div className=\"mb-3\">\r\n//           <label className=\"form-label\"><strong>Select Crop</strong></label>\r\n//           <select\r\n//             className=\"form-control\"\r\n//             value={selectedCrop}\r\n//             onChange={(e) => {\r\n//               const cropId = parseInt(e.target.value, 10);\r\n//               setSelectedCrop(cropId);\r\n//               if (cropId > 0) fetchHistory(cropId);\r\n//             }}\r\n//           >\r\n//             <option value=\"\">-- Select Crop --</option>\r\n//             {loading ? (\r\n//               <option disabled>Loading crops...</option>\r\n//             ) : (\r\n//               crops.map((crop) => (\r\n//                 <option key={crop.cropId} value={crop.cropId}>\r\n//                   {crop.cropName}\r\n//                 </option>\r\n//               ))\r\n//             )}\r\n//           </select>\r\n//         </div>\r\n\r\n//         {/* Enter New Rate */}\r\n//         <div className=\"mb-3\">\r\n//           <label className=\"form-label\"><strong>New Rate (₹)</strong></label>\r\n//           <input\r\n//             type=\"number\"\r\n//             className=\"form-control\"\r\n//             value={newRate}\r\n//             onChange={(e) => setNewRate(e.target.value)}\r\n//             placeholder=\"Enter new rate\"\r\n//           />\r\n//         </div>\r\n\r\n//         {/* Buttons */}\r\n//         <div className=\"d-flex justify-content-between\">\r\n//           <button className=\"btn btn-primary\" onClick={handleUpdate}>\r\n//             Update Rate\r\n//           </button>\r\n\r\n//           {/* ✅ Back to Admin Dashboard Button */}\r\n//           <button className=\"btn btn-secondary\" onClick={() => navigate(\"/AdminDashboard\")}>\r\n//             Back to Admin Dashboard\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* Display Crop Rate History */}\r\n//         {history.length > 0 && (\r\n//           <div className=\"mt-4\">\r\n//             <h4>Rate Update History</h4>\r\n//             <table className=\"table table-bordered\">\r\n//               <thead>\r\n//                 <tr>\r\n//                   <th>Date</th>\r\n//                   <th>Old Rate (₹)</th>\r\n//                   <th>Updated By</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {history.map((entry, index) => (\r\n//                   <tr key={index}>\r\n//                     <td>{new Date(entry.rateDate).toLocaleDateString()}</td>\r\n//                     <td>₹{entry.rate}</td>\r\n//                     <td>{entry.updatedBy}</td>\r\n//                   </tr>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default AdminUpdateCrop;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  getCrops,\r\n  updateCropRate,\r\n  getCropRateHistory,\r\n} from \"../service/CropService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nfunction AdminUpdateCrop() {\r\n  const [crops, setCrops] = useState([]); // Store crop list\r\n  const [selectedCrop, setSelectedCrop] = useState(\"\"); // Selected crop ID\r\n  const [newRate, setNewRate] = useState(\"\"); // New rate input\r\n  const [history, setHistory] = useState([]); // Store crop rate history\r\n  const [loading, setLoading] = useState(false); // Loading state\r\n\r\n  // ✅ Retrieve Admin Token from SessionStorage\r\n  const adminToken = sessionStorage.getItem(\"token\");\r\n\r\n  // ✅ Fetch Crops on Component Mount\r\n  useEffect(() => {\r\n    fetchCrops();\r\n  }, []);\r\n\r\n  // ✅ Fetch All Crops\r\n  async function fetchCrops() {\r\n    try {\r\n      setLoading(true);\r\n      console.log(\"Fetching crops from API...\");\r\n      const data = await getCrops();\r\n      console.log(\"Crops fetched:\", data);\r\n\r\n      if (!Array.isArray(data)) {\r\n        throw new Error(\"Invalid API response. Expected an array.\");\r\n      }\r\n\r\n      setCrops(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching crops:\", error);\r\n      toast.error(\"Failed to fetch crops.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  // ✅ Fetch Crop Rate History\r\n  async function fetchHistory(cropId) {\r\n    const parsedCropId = parseInt(cropId, 10);\r\n\r\n    if (!parsedCropId || isNaN(parsedCropId)) {\r\n      console.warn(\"Invalid cropId received:\", cropId);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log(`Fetching history for Crop ID: ${parsedCropId}`);\r\n      const data = await getCropRateHistory(parsedCropId);\r\n      console.log(\"History fetched:\", data);\r\n      setHistory(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching rate history:\", error);\r\n      toast.error(\"No rate history found.\");\r\n      setHistory([]);\r\n    }\r\n  }\r\n\r\n  // ✅ Handle Update Button Click\r\n  async function handleUpdate() {\r\n    const parsedCropId = parseInt(selectedCrop, 10);\r\n    const parsedNewRate = parseInt(newRate, 10);\r\n\r\n    if (!parsedCropId || isNaN(parsedCropId)) {\r\n      toast.error(\"Please select a valid crop.\");\r\n      console.error(\"Invalid Crop ID:\", selectedCrop);\r\n      return;\r\n    }\r\n\r\n    if (!parsedNewRate || isNaN(parsedNewRate) || parsedNewRate <= 0) {\r\n      toast.error(\"Please enter a valid rate.\");\r\n      console.error(\"Invalid Rate:\", newRate);\r\n      return;\r\n    }\r\n\r\n    console.log(\"Sending Data:\", {\r\n      CropId: parsedCropId,\r\n      NewRate: parsedNewRate,\r\n      AdminToken: adminToken, // Debugging token\r\n    });\r\n\r\n    try {\r\n      await updateCropRate(parsedCropId, parsedNewRate, adminToken);\r\n      toast.success(\"Crop rate updated successfully!\");\r\n\r\n      fetchHistory(parsedCropId); // ✅ Refresh History\r\n      fetchCrops(); // ✅ Refresh crop list\r\n    } catch (error) {\r\n      console.error(\"Error updating crop rate:\", error);\r\n      toast.error(error.message || \"Failed to update crop rate.\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h2 className=\"text-center\">Admin - Update Crop Rate</h2>\r\n\r\n      {/* Select Crop */}\r\n      <div className=\"mb-3\">\r\n        <label>Select Crop</label>\r\n        <select\r\n          className=\"form-control\"\r\n          value={selectedCrop}\r\n          onChange={(e) => {\r\n            const cropId = parseInt(e.target.value, 10);\r\n            setSelectedCrop(cropId);\r\n            if (cropId > 0) fetchHistory(cropId);\r\n          }}\r\n        >\r\n          <option value=\"\">-- Select Crop --</option>\r\n          {loading ? (\r\n            <option disabled>Loading crops...</option>\r\n          ) : (\r\n            crops.map((crop) => (\r\n              <option key={crop.cropId} value={crop.cropId}>\r\n                {crop.cropName} - ₹{crop.rate}\r\n              </option>\r\n            ))\r\n          )}\r\n        </select>\r\n      </div>\r\n\r\n      {/* Enter New Rate */}\r\n      <div className=\"mb-3\">\r\n        <label>New Rate (₹)</label>\r\n        <input\r\n          type=\"number\"\r\n          className=\"form-control\"\r\n          value={newRate}\r\n          onChange={(e) => setNewRate(e.target.value)}\r\n          placeholder=\"Enter new rate\"\r\n        />\r\n      </div>\r\n\r\n      {/* Update Button */}\r\n      <button className=\"btn btn-primary mt-2\" onClick={handleUpdate}>\r\n        Update Rate\r\n      </button>\r\n\r\n      {/* Display Crop Rate History */}\r\n      {history.length > 0 && (\r\n        <div className=\"mt-4\">\r\n          <h4>Rate Update History</h4>\r\n          <table className=\"table table-bordered\">\r\n            <thead>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Old Rate (₹)</th>\r\n                <th>Updated By</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {history.map((entry, index) => (\r\n                <tr key={index}>\r\n                  <td>{new Date(entry.rateDate).toLocaleDateString()}</td>\r\n                  <td>₹{entry.rate}</td>\r\n                  <td>{entry.updatedBy}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminUpdateCrop;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}